206. Reverse Linked List
Example:
Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL

Thoughts:
Approach #1 (Iterative) [Accepted]

Assume that we have linked list 1 → 2 → 3 → Ø, we would like to change it to Ø ← 1 ← 2 ← 3.

While you are traversing the list, change the current node's next pointer to point to its previous element. Since a node does not have reference to its previous node, you must store its previous element beforehand. You also need another pointer to store the next node before changing the reference. Do not forget to return the new head reference at the end!

public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}

Complexity analysis

    Time complexity : O(n). Assume that nnn is the list's length, the time complexity is O(n).

    Space complexity : O(1).

Approach #2 (Recursive) [Accepted]
The recursive version is slightly trickier and the key is to work backwards. 
Assume that the rest of the list had already been reversed, now how do I reverse the front part? 
Let's assume the list is: n1 → … → nk-1 → nk → nk+1 → … → nm → Ø
Assume from node nk+1 to nm had been reversed and you are at node nk. n1 → … → nk-1 → nk → nk+1 ← … ← nm
We want nk+1’s next node to point to nk.So,nk.next.next = nk; Be very careful that n1's next must point to Ø. 
If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.

Solution:
public ListNode reverseList(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode p = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return p;
}
Difference between iteration and recursion
https://techdifferences.com/difference-between-recursion-and-iteration-2.html
92. Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.
Note: 1 ≤ m ≤ n ≤ length of list.
Example:
Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

Thoughts: First, we already know the approach to reverse a linklist, now come up with a solution to reverse
n nodes. Step by step, finish the reversebetween function.

Solution:
class Solution {
    ListNode successor = null;
    ListNode reverseN(ListNode head, int n) {
        if (n == 1) {
            successor = head.next;
            return head;
        }
        ListNode last = reverseN(head.next, n - 1);
        head.next.next = head;
        head.next = successor;
        return last;
    }    
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (m <= 1) {
            // You can also expand the code here to get rid of the helper function 'reverseN'
            return reverseN(head, n - m + 1);
        }
        head.next = reverseBetween(head.next, m - 1, n - 1);
        return head;
    }
    
}
