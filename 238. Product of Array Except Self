238. Product of Array Except Self
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:
Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).
Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

Division Solution 1:
public int[] productExceptSelf(int[] nums) {

        int[] result = new int[nums.length];

        if (nums.length == 2) {
            result[0] = nums[1];
            result[1] = nums[0];
            return result;
        }
        
        int product = 1;
        int zeroCheck = -1;

        for (int n : nums) {
            if (n != 0) {
                product *= n;
            } else {
                zeroCheck++;
            }
        }

        for (int i = 0; i < nums.length; i++) {

            if (zeroCheck > 0) {
                result[i] = 0;

            } else if (zeroCheck == 0) {

                if (nums[i] == 0) {
                    result[i] = product;
                } else {
                    result[i] = 0;
                }
            } else {
                result[i] = product / nums[i];
            }
        }

        return result;
    }
    
Solution 2:
 vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int > res(n);
        vector<int > dp1(n+1, 1);
        vector<int > dp2(n+1, 1);
        for(int i = 1; i <= n; ++i){
            dp1[i] = dp1[i-1] * nums[i-1];
        }
        for(int i = n-1; i >= 0; --i){
            dp2[i] = dp2[i+1] * nums[i];
        }
        for(int i = 0; i < n; ++i){
            res[i] = dp1[i] * dp2[i+1];
        }
        return res;
    }
    
Solution 3:
    public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];
    for (int i = 0, tmp = 1; i < nums.length; i++) {
        result[i] = tmp;
        tmp *= nums[i];
    }
    for (int i = nums.length - 1, tmp = 1; i >= 0; i--) {
        result[i] *= tmp;
        tmp *= nums[i];
    }
    return result;
}
