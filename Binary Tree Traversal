 Breadth First Traversal (Or Level Order Traversal)
 Depth First Traversals
        Inorder Traversal (Left-Root-Right)
        Preorder Traversal (Root-Left-Right)
        Postorder Traversal (Left-Right-Root)
        
144. Binary Tree Preorder Traversal
Given a binary tree, return the preorder traversal of its nodes' values.
Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

Solutions:
public List<Integer> preorderTraversal(TreeNode root) {
    LinkedList<TreeNode> stack = new LinkedList<>();
    LinkedList<Integer> output = new LinkedList<>();
    if (root == null) {
      return output;
    }
    stack.add(root);
    while(!stack.isEmpty()){
      TreeNode node = stack.pollLast();
      output.add(node.val);
      if (node.right!= null){
         stack.add(node.right);
      }
      if (node.left!= null){
         stack.add(node.left);
      }
    }
    return output;
  }
  
94. Binary Tree Inorder Traversal
Given a binary tree, return the inorder traversal of its nodes' values.
Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3
Output: [1,3,2]

Solution：
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    if (root == null) return list;
    Stack<TreeNode> stack = new Stack();
    while(root != null || !stack.isEmpty()){
        while(root != null){
            stack.push(root);
            root=root.left;
        }
        root = stack.pop();
        list.add(root.val);
        root = root.right;
    }
    return list;
}

145. Binary Tree Postorder Traversal
Given a binary tree, return the postorder traversal of its nodes' values.
Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3
Output: [3,2,1]

Solution：
public List<Integer> postorderTraversal(TreeNode root) {
    LinkedList<TreeNode> stack = new LinkedList<>();
    LinkedList<Integer> output = new LinkedList<>();
    if (root == null) {
      return output;
    }

    stack.add(root);
    while (!stack.isEmpty()) {
      TreeNode node = stack.pollLast();
      output.addFirst(node.val);
      if (node.left != null) {
        stack.add(node.left);
      }
      if (node.right != null) {
        stack.add(node.right);
      }
    }
    return output;
  }
  
Application of preorder traversal:
114. Flatten Binary Tree to Linked List
Given a binary tree, flatten it to a linked list in-place.
For example, given the following tree:
    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:
1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
Solution:
class Solution {
    public void flatten(TreeNode root) {
    if (root == null) {
       return;
    }
    Stack<TreeNode> stk = new Stack<TreeNode>();
    stk.push(root);
    while(!stk.isEmpty()){
     TreeNode node = stk.pop();
      if (node.right!= null){
         stk.push(node.right);
      }
      if (node.left!= null){
         stk.push(node.left);
      }
      if (!stk.isEmpty()) 
         node.right = stk.peek();
      node.left = null;
    }
    }
}
